[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "ai-maga"
version = "0.1.0"
description = "AI Мага - голосовой ассистент с интеграциями"
readme = "README.md"
requires-python = ">=3.11"
authors = [
    {name = "AI Мага Team"},
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
dependencies = [
    # Core
    "python-dotenv>=1.0.0",
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",

    # Async
    "asyncio-compat>=0.1.0",
    "uvloop>=0.17.0; sys_platform != 'win32'",

    # HTTP
    "httpx>=0.25.0",
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",

    # Database
    "sqlalchemy>=2.0.0",
    "psycopg2-binary>=2.9.0",
    "alembic>=1.12.0",

    # Redis/Queues
    "redis>=4.6.0",
    "arq>=0.25.0",

    # Logging/Metrics
    "structlog>=23.2.0",
    "loguru>=0.7.0",
    "opentelemetry-api>=1.21.0",
    "opentelemetry-sdk>=1.21.0",
    "prometheus-client>=0.19.0",

    # CLI
    "typer>=0.9.0",
    "rich>=13.7.0",

    # CV/Audio
    "opencv-python>=4.8.0",
    "pillow>=10.1.0",
    "pyaudio>=0.2.13",
    "numpy>=1.24.0",
    "scipy>=1.11.0",
    "webrtcvad>=2.0.10",
    "pvporcupine>=3.0.0",

    # Integrations
    "aiogram>=3.0.0",
    "requests>=2.31.0",

    # Utils
    "tenacity>=8.2.0",
    "backoff>=2.2.0",
    "limits>=3.6.0",
    "cryptography>=41.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "faker>=20.0.0",
    "mypy>=1.7.0",
    "ruff>=0.1.0",
    "bandit>=1.7.0",
    "deptry>=0.12.0",
    "vulture>=2.7.0",
    "pre-commit>=3.5.0",
]
test = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
]

[project.scripts]
ai-maga = "app.api.cli.app:main"

[tool.setuptools]
packages = ["app"]

[tool.setuptools.package-dir]
"" = "."

[tool.ruff]
line-length = 88
target-version = "py311"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501", # line too long, handled by black
    "B008", # do not perform function calls in argument defaults
    "C901", # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["B011"] # assert false

[tool.ruff.isort]
known-first-party = ["app"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = "app.tests.*"
ignore_errors = true

[tool.pytest.ini_options]
testpaths = ["app/tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=app",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
    "-v",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "contract: Contract tests",
    "slow: Slow tests",
]

[tool.coverage.run]
source = ["app"]
omit = [
    "app/tests/*",
    "*/venv/*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
]
