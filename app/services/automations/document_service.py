"""Document processing service with OCR and AI analysis."""

from typing import List
from uuid import uuid4

from app.adapters.redis_client import redis_adapter
from app.core.logging import get_structlog_logger
from app.domain.models import Document, DocumentUploadRequest

logger = get_structlog_logger(__name__)


class DocumentService:
    """Service for processing documents with OCR and AI."""

    def __init__(self):
        self.redis = redis_adapter

    async def upload_document(self, user_id: str, request: DocumentUploadRequest) -> Document:
        """Upload and process a document."""
        document = Document(
            id=uuid4(),
            user_id=user_id,
            filename=request.filename,
            original_name=request.filename,  # In real implementation, this would be different
            content_type=request.content_type,
            file_size=request.file_size,
            extracted_text=None,  # Would be populated by OCR
            summary=None,  # Would be generated by AI
            categories=[],  # Would be classified by AI
            tags=[],  # Would be extracted by AI
            processed=False
        )

        # Store in Redis
        await self.redis.store_document(str(document.id), {
            "id": str(document.id),
            "user_id": user_id,
            "filename": document.filename,
            "original_name": document.original_name,
            "content_type": document.content_type,
            "file_size": document.file_size,
            "extracted_text": document.extracted_text,
            "summary": document.summary,
            "categories": document.categories,
            "tags": document.tags,
            "processed": document.processed,
            "metadata": document.metadata,
            "created_at": document.created_at.isoformat(),
            "processed_at": document.processed_at.isoformat() if document.processed_at else None
        })

        # In a real implementation, we would:
        # 1. Save file to storage
        # 2. Run OCR if it's an image
        # 3. Generate summary with GPT
        # 4. Classify document category
        # 5. Extract tags

        logger.info("Document uploaded", document_id=str(document.id), user_id=user_id, filename=document.filename)
        return document

    async def get_user_documents(self, user_id: str, limit: int = 20) -> List[Document]:
        """Get user's documents."""
        # This is a simplified implementation
        # In production, we'd need to track user's documents
        documents = []
        # For now, return empty list - would need proper indexing
        return documents

    async def process_document(self, document_id: str) -> Optional[Document]:
        """Process a document with OCR and AI analysis."""
        doc_data = await self.redis.get_document(document_id)
        if not doc_data:
            return None

        # In a real implementation, this would:
        # 1. Load file from storage
        # 2. Run OCR using Yandex Vision API
        # 3. Generate summary using GPT
        # 4. Classify and tag the document

        # For now, mark as processed
        doc_data["processed"] = True
        doc_data["extracted_text"] = "Текст документа (заглушка)"
        doc_data["summary"] = "Краткое содержание документа (заглушка)"
        doc_data["categories"] = ["документ"]
        doc_data["tags"] = ["обработан"]

        await self.redis.store_document(document_id, doc_data)

        logger.info("Document processed", document_id=document_id)
        return Document(**doc_data)

    async def search_documents(self, user_id: str, query: str) -> List[Document]:
        """Search documents by content."""
        # This is a simplified implementation
        # In production, we'd use full-text search
        documents = await self.get_user_documents(user_id)

        # Simple text matching
        results = []
        query_lower = query.lower()
        for doc in documents:
            if doc.extracted_text and query_lower in doc.extracted_text.lower():
                results.append(doc)
            elif doc.summary and query_lower in doc.summary.lower():
                results.append(doc)

        return results


# Global document service instance
document_service = DocumentService()
