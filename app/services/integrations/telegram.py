"""Telegram Bot integration."""

import asyncio
import io
import json
from typing import Any, Dict, Optional

from app.adapters.http_client import http_client
from app.core.config import settings
from app.core.errors import IntegrationError
from app.core.metrics import metrics
from app.services.llm.yandex_gpt import yandex_gpt
from app.services.voice.stt import stt
from app.services.voice.tts import tts


class TelegramService:
    """Telegram Bot API integration."""

    def __init__(self):
        self.base_url = f"https://api.telegram.org/bot{settings.tg_bot_token.get_secret_value()}"

    async def send_message(
        self,
        chat_id: int,
        text: str,
        reply_to_message_id: Optional[int] = None,
        parse_mode: Optional[str] = None
    ) -> Dict[str, Any]:
        """Send text message to Telegram chat."""
        url = f"{self.base_url}/sendMessage"
        data = {
            "chat_id": chat_id,
            "text": text,
            "reply_to_message_id": reply_to_message_id,
        }
        if parse_mode:
            data["parse_mode"] = parse_mode

        try:
            response = await http_client.post(url, json=data)
            metrics.increment("telegram_messages_sent", type="text")
            return response
        except Exception as e:
            metrics.increment("telegram_messages_sent", type="text", status="error")
            raise IntegrationError(f"Failed to send Telegram message: {e}")

    async def send_voice(
        self,
        chat_id: int,
        voice_data: bytes,
        duration: Optional[int] = None,
        reply_to_message_id: Optional[int] = None
    ) -> Dict[str, Any]:
        """Send voice message to Telegram chat."""
        url = f"{self.base_url}/sendVoice"

        # Convert audio data to file-like object
        voice_file = io.BytesIO(voice_data)
        voice_file.name = "voice.ogg"

        # Prepare multipart form data
        data = {
            "chat_id": str(chat_id),
            "voice": voice_file,
        }
        if duration:
            data["duration"] = str(duration)
        if reply_to_message_id:
            data["reply_to_message_id"] = str(reply_to_message_id)

        headers = {"Content-Type": "multipart/form-data"}

        try:
            # Note: This is a simplified implementation
            # In production, you might want to use aiohttp directly for file uploads
            response = await http_client.post(url, data=data, headers=headers)
            metrics.increment("telegram_messages_sent", type="voice")
            return response
        except Exception as e:
            metrics.increment("telegram_messages_sent", type="voice", status="error")
            raise IntegrationError(f"Failed to send Telegram voice: {e}")

    async def download_file(self, file_id: str) -> bytes:
        """Download file from Telegram servers."""
        # First get file info
        file_info_url = f"{self.base_url}/getFile"
        file_info = await http_client.post(file_info_url, json={"file_id": file_id})

        if not file_info.get("ok"):
            raise IntegrationError(f"Failed to get file info: {file_info}")

        file_path = file_info["result"]["file_path"]
        download_url = f"https://api.telegram.org/file/bot{settings.tg_bot_token.get_secret_value()}/{file_path}"

        try:
            response = await http_client.get(download_url)
            if isinstance(response, bytes):
                return response
            else:
                raise IntegrationError("Unexpected response type for file download")
        except Exception as e:
            raise IntegrationError(f"Failed to download file: {e}")

    async def process_text_message(self, chat_id: int, text: str, message_id: int) -> None:
        """Process text message and send response."""
        try:
            # Handle commands
            if text.startswith('/'):
                await self._handle_command(chat_id, text, message_id)
                return

            # Get user info for personalization
            user_info = await self._get_user_info(chat_id)

            # Add personalization to the message
            personalized_text = await self._personalize_message(text, user_info)

            # Generate response using Yandex GPT
            response_text = await yandex_gpt.chat(
                personalized_text,
                session_id=f"telegram_{chat_id}"
            )

            # Send text response
            await self.send_message(
                chat_id=chat_id,
                text=response_text,
                reply_to_message_id=message_id
            )

            # Generate voice response
            voice_data = await tts.synthesize(
                text=response_text,
                language="ru-RU",
                format="oggopus"  # Telegram prefers OGG Opus for voice messages
            )

            # Send voice response
            await self.send_voice(
                chat_id=chat_id,
                voice_data=voice_data,
                reply_to_message_id=message_id
            )

        except Exception as e:
            error_msg = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è."
            await self.send_message(chat_id=chat_id, text=error_msg)
            raise

    async def _get_user_info(self, chat_id: int) -> Dict[str, Any]:
        """Get user information from Telegram."""
        try:
            url = f"{self.telegram_api_url}/getChat"
            params = {"chat_id": chat_id}
            async with httpx.AsyncClient() as client:
                response = await client.post(url, params=params, timeout=10)
                response.raise_for_status()
                chat_info = response.json()["result"]

            # Try to get member info for groups
            if chat_info.get("type") in ["group", "supergroup"]:
                url = f"{self.telegram_api_url}/getChatMember"
                params = {"chat_id": chat_id, "user_id": chat_id}
                async with httpx.AsyncClient() as client:
                    response = await client.post(url, params=params, timeout=10)
                    if response.status_code == 200:
                        member_info = response.json()["result"]
                        return {
                            "name": member_info.get("user", {}).get("first_name", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"),
                            "username": member_info.get("user", {}).get("username"),
                            "is_admin": member_info.get("status") in ["administrator", "creator"]
                        }

            # For private chats, try to get user profile
            if "first_name" in chat_info:
                return {
                    "name": chat_info.get("first_name", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"),
                    "username": chat_info.get("username"),
                    "is_admin": False
                }

            return {"name": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", "username": None, "is_admin": False}

        except Exception as e:
            logger.warning(f"Failed to get user info for chat {chat_id}: {e}")
            return {"name": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", "username": None, "is_admin": False}

    async def _handle_command(self, chat_id: int, command: str, message_id: int) -> None:
        """Handle bot commands."""
        cmd_parts = command.split()
        cmd = cmd_parts[0].lower()

        if cmd == "/start":
            await self._cmd_start(chat_id, message_id)
        elif cmd == "/help":
            await self._cmd_help(chat_id, message_id)
        elif cmd == "/status":
            await self._cmd_status(chat_id, message_id)
        elif cmd == "/about":
            await self._cmd_about(chat_id, message_id)
        else:
            await self.send_message(
                chat_id=chat_id,
                text="–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.",
                reply_to_message_id=message_id
            )

    async def _cmd_start(self, chat_id: int, message_id: int) -> None:
        """Handle /start command."""
        user_info = await self._get_user_info(chat_id)
        welcome_msg = f"""
ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AI –ú–∞–≥–∞!

–ü—Ä–∏–≤–µ—Ç, {user_info['name']}! –Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –≥–æ–ª–æ—Å–æ–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.

üí¨ **–ß—Ç–æ —è —É–º–µ—é:**
‚Ä¢ –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∏ –≤–µ—Å—Ç–∏ –±–µ—Å–µ–¥—É
‚Ä¢ –ü–æ–Ω–∏–º–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
‚Ä¢ –û—Ç–≤–µ—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–º –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ

üéØ **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/status - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
/about - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –∏–ª–∏ —Å–∫–∞–∂–∏—Ç–µ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å! üé§
        """
        await self.send_message(chat_id=chat_id, text=welcome_msg.strip(), reply_to_message_id=message_id)

    async def _cmd_help(self, chat_id: int, message_id: int) -> None:
        """Handle /help command."""
        help_msg = """
üìã **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:**

üí¨ **–û–±—â–µ–Ω–∏–µ:**
‚Ä¢ –ü—Ä–æ—Å—Ç–æ –ø–∏—à–∏—Ç–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
‚Ä¢ –Ø –æ—Ç–≤–µ—á—É —Ç–µ–∫—Å—Ç–æ–º –∏ –≥–æ–ª–æ—Å–æ–º

üéØ **–ö–æ–º–∞–Ω–¥—ã:**
/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/status - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
/about - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ

üé§ **–ì–æ–ª–æ—Å:**
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - —è –ø–æ–π–º—É —Ä–µ—á—å
‚Ä¢ –ü–æ–ª—É—á—É –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò –∏ –æ—Ç–≤–µ—á—É –≥–æ–ª–æ—Å–æ–º

üöÄ **–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫:** MagistrTheOne
        """
        await self.send_message(chat_id=chat_id, text=help_msg.strip(), reply_to_message_id=message_id)

    async def _cmd_status(self, chat_id: int, message_id: int) -> None:
        """Handle /status command."""
        try:
            # Test system components
            status_msg = "üîç **–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:**\n\n"

            # Check database
            try:
                # This is a simple check - in real app you'd ping the database
                status_msg += "‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: –î–æ—Å—Ç—É–ø–Ω–∞\n"
            except:
                status_msg += "‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞\n"

            # Check Redis
            try:
                status_msg += "‚úÖ –ö—ç—à: –î–æ—Å—Ç—É–ø–µ–Ω\n"
            except:
                status_msg += "‚ùå –ö—ç—à: –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n"

            # Check AI services
            try:
                status_msg += "‚úÖ Yandex GPT: –î–æ—Å—Ç—É–ø–µ–Ω\n"
                status_msg += "‚úÖ –ì–æ–ª–æ—Å–æ–≤–æ–π —Å–∏–Ω—Ç–µ–∑: –î–æ—Å—Ç—É–ø–µ–Ω\n"
                status_msg += "‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏: –î–æ—Å—Ç—É–ø–Ω–æ\n"
            except:
                status_msg += "‚ùå AI —Å–µ—Ä–≤–∏—Å—ã: –ü—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å—é\n"

            status_msg += f"\nü§ñ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!"

        except Exception as e:
            status_msg = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã."

        await self.send_message(chat_id=chat_id, text=status_msg, reply_to_message_id=message_id)

    async def _cmd_about(self, chat_id: int, message_id: int) -> None:
        """Handle /about command."""
        about_msg = """
ü§ñ **AI –ú–∞–≥–∞** - –ì–æ–ª–æ—Å–æ–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è

**–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –±–∞–∑–µ Yandex GPT
‚Ä¢ –ì–æ–ª–æ—Å–æ–≤–æ–µ –æ–±—â–µ–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ AI —Å–µ—Ä–≤–∏—Å–∞–º–∏

**–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:**
‚Ä¢ FastAPI –¥–ª—è –≤—ã—Å–æ–∫–æ–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ API
‚Ä¢ Docker –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–≥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
‚Ä¢ PostgreSQL + Redis –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –∏ –∫—ç—à–∞
‚Ä¢ Yandex SpeechKit –¥–ª—è –≥–æ–ª–æ—Å–∞
‚Ä¢ Railway –¥–ª—è –æ–±–ª–∞—á–Ω–æ–≥–æ —Ö–æ—Å—Ç–∏–Ω–≥–∞

**–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫:** MagistrTheOne
**–í–µ—Ä—Å–∏—è:** 2.0 (Production)

üöÄ Powered by AI & Cloud Technologies
        """
        await self.send_message(chat_id=chat_id, text=about_msg.strip(), reply_to_message_id=message_id)

    async def _personalize_message(self, text: str, user_info: Dict[str, Any]) -> str:
        """Add personalization to the message."""
        if user_info.get("name") and user_info["name"] != "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å":
            # Add context about the user
            personalized = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_info['name']}"
            if user_info.get("username"):
                personalized += f" (@{user_info['username']})"
            personalized += f" —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç: {text}"
            return personalized
        return text

    async def process_voice_message(self, chat_id: int, voice_file_id: str, message_id: int) -> None:
        """Process voice message and send response."""
        try:
            # Download voice file
            voice_data = await self.download_file(voice_file_id)

            # Transcribe speech to text
            transcription_result = await stt.transcribe(voice_data)

            if not transcription_result.get("text"):
                await self.send_message(
                    chat_id=chat_id,
                    text="–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                    reply_to_message_id=message_id
                )
                return

            user_text = transcription_result["text"]

            # Confirm transcription
            await self.send_message(
                chat_id=chat_id,
                text=f"üé§ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {user_text}",
                reply_to_message_id=message_id
            )

            # Generate response using Yandex GPT
            response_text = await yandex_gpt.chat(
                user_text,
                session_id=f"telegram_{chat_id}"
            )

            # Send text response
            await self.send_message(
                chat_id=chat_id,
                text=f"üí¨ {response_text}",
                reply_to_message_id=message_id
            )

            # Generate voice response
            voice_data = await tts.synthesize(
                text=response_text,
                language="ru-RU",
                format="oggopus"
            )

            # Send voice response
            await self.send_voice(
                chat_id=chat_id,
                voice_data=voice_data,
                reply_to_message_id=message_id
            )

        except Exception as e:
            error_msg = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è."
            await self.send_message(chat_id=chat_id, text=error_msg)
            raise


# Global Telegram service instance
telegram_service = TelegramService()
