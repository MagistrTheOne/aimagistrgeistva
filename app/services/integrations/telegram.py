"""Telegram Bot integration."""

import asyncio
import io
import json
import time
from typing import Any, Dict, List, Optional, Tuple

import httpx

from app.adapters.http_client import http_client
from app.adapters.rate_limit import check_rate_limit
from app.core.config import settings
from app.core.errors import IntegrationError
from app.core.logging import get_structlog_logger
from app.core.metrics import metrics
from app.domain.models import CommandType
from app.services.llm.yandex_gpt import yandex_gpt
from app.services.voice.stt import stt
from app.services.voice.tts import tts


class CommandHandler:
    """Handles bot commands."""

    def __init__(self, telegram_service: 'TelegramService'):
        self.telegram_service = telegram_service

    async def handle_command(self, chat_id: int, command: str, message_id: int) -> None:
        """Handle bot commands."""
        cmd_parts = command.split()
        cmd = cmd_parts[0].lower()

        if cmd == "/start":
            await self._cmd_start(chat_id, message_id)
        elif cmd == "/help":
            await self._cmd_help(chat_id, message_id)
        elif cmd == "/status":
            await self._cmd_status(chat_id, message_id)
        elif cmd == "/about":
            await self._cmd_about(chat_id, message_id)
        elif cmd == "/weather":
            await self._cmd_weather(chat_id, message_id, cmd_parts)
        elif cmd == "/news":
            await self._cmd_news(chat_id, message_id, cmd_parts)
        elif cmd == "/translate":
            await self._cmd_translate(chat_id, message_id, cmd_parts)
        elif cmd == "/image":
            await self._cmd_image(chat_id, message_id, cmd_parts)
        elif cmd == "/remind":
            await self._cmd_remind(chat_id, message_id, cmd_parts)
        elif cmd == "/calc":
            await self._cmd_calc(chat_id, message_id, cmd_parts)
        elif cmd == "/poll":
            await self._cmd_poll(chat_id, message_id, cmd_parts)
        elif cmd == "/quiz":
            await self._cmd_quiz(chat_id, message_id, cmd_parts)
        elif cmd == "/mood":
            await self._cmd_mood(chat_id, message_id)
        elif cmd == "/task":
            await self._cmd_task(chat_id, message_id, cmd_parts)
        elif cmd == "/tasks":
            await self._cmd_tasks(chat_id, message_id)
        elif cmd == "/expense":
            await self._cmd_expense(chat_id, message_id, cmd_parts)
        elif cmd == "/expenses":
            await self._cmd_expenses(chat_id, message_id)
        else:
            await self.telegram_service.send_message(
                chat_id=chat_id,
                text="–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.",
                reply_to_message_id=message_id
            )

    async def _cmd_start(self, chat_id: int, message_id: int) -> None:
        """Handle /start command."""
        user_info = await self.telegram_service._get_user_info(chat_id)
        welcome_msg = f"""
ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AI –ú–∞–≥–∞!

–ü—Ä–∏–≤–µ—Ç, {user_info['name']}! –Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –≥–æ–ª–æ—Å–æ–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.

üí¨ **–ß—Ç–æ —è —É–º–µ—é:**
‚Ä¢ –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∏ –≤–µ—Å—Ç–∏ –±–µ—Å–µ–¥—É
‚Ä¢ –ü–æ–Ω–∏–º–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
‚Ä¢ –û—Ç–≤–µ—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–º –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ

üéØ **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/status - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
/about - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –∏–ª–∏ —Å–∫–∞–∂–∏—Ç–µ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å! üé§
        """
        await self.telegram_service.send_message(chat_id=chat_id, text=welcome_msg.strip(), reply_to_message_id=message_id)

    async def _cmd_help(self, chat_id: int, message_id: int) -> None:
        """Handle /help command."""
        help_msg = """
üìã **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:**

üí¨ **–û–±—â–µ–Ω–∏–µ:**
‚Ä¢ –ü—Ä–æ—Å—Ç–æ –ø–∏—à–∏—Ç–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
‚Ä¢ –Ø –æ—Ç–≤–µ—á—É —Ç–µ–∫—Å—Ç–æ–º –∏ –≥–æ–ª–æ—Å–æ–º

üéØ **–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/status - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
/about - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ

üõ†Ô∏è **–ü–æ–ª–µ–∑–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**
/weather [–≥–æ—Ä–æ–¥] - –ø–æ–≥–æ–¥–∞
/news [—Ç–µ–º–∞] - –Ω–æ–≤–æ—Å—Ç–∏
/translate [—è–∑—ã–∫] [—Ç–µ–∫—Å—Ç] - –ø–µ—Ä–µ–≤–æ–¥
/image [–æ–ø–∏—Å–∞–Ω–∏–µ] - –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
/remind [–≤—Ä–µ–º—è] [–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ] - –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
/calc [–≤—ã—Ä–∞–∂–µ–Ω–∏–µ] - –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä

üìã **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏:**
/task [–æ–ø–∏—Å–∞–Ω–∏–µ] - —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É (AI –ø–æ–π–º–µ—Ç —Å—Ä–æ–∫–∏ –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã)
/tasks - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏

üí∞ **–§–∏–Ω–∞–Ω—Å—ã:**
/expense [—Å—É–º–º–∞] [–∫–∞—Ç–µ–≥–æ—Ä–∏—è] [–æ–ø–∏—Å–∞–Ω–∏–µ] - –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥
/expenses - –ø–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å—Ö–æ–¥—ã

üéÆ **–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤:**
/poll [–≤–æ–ø—Ä–æ—Å] [–≤–∞—Ä–∏–∞–Ω—Ç—ã] - —Å–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å
/quiz - –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É
/mood - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ

üé§ **–ì–æ–ª–æ—Å:**
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - —è –ø–æ–π–º—É —Ä–µ—á—å
‚Ä¢ –ü–æ–ª—É—á—É –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò –∏ –æ—Ç–≤–µ—á—É –≥–æ–ª–æ—Å–æ–º

üöÄ **–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫:** MagistrTheOne
        """
        await self.telegram_service.send_message(chat_id=chat_id, text=help_msg.strip(), reply_to_message_id=message_id)

    async def _cmd_status(self, chat_id: int, message_id: int) -> None:
        """Handle /status command."""
        try:
            # Test system components
            status_msg = "üîç **–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:**\n\n"

            # Check database
            try:
                # This is a simple check - in real app you'd ping the database
                status_msg += "‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: –î–æ—Å—Ç—É–ø–Ω–∞\n"
            except:
                status_msg += "‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞\n"

            # Check Redis
            try:
                status_msg += " –ö—ç—à: –î–æ—Å—Ç—É–ø–µ–Ω\n"
            except:
                status_msg += " –ö—ç—à: –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n"

            # Check AI services
            try:
                status_msg += " Yandex GPT: –î–æ—Å—Ç—É–ø–µ–Ω\n"
                status_msg += " –ì–æ–ª–æ—Å–æ–≤–æ–π —Å–∏–Ω—Ç–µ–∑: –î–æ—Å—Ç—É–ø–µ–Ω\n"
                status_msg += "‚úÖ–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏: –î–æ—Å—Ç—É–ø–Ω–æ\n"
            except:
                status_msg += " AI —Å–µ—Ä–≤–∏—Å—ã: –ü—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å—é\n"

            status_msg += f"\n –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!"

        except Exception as e:
            status_msg = " –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã."

        await self.telegram_service.send_message(chat_id=chat_id, text=status_msg, reply_to_message_id=message_id)

    async def _cmd_about(self, chat_id: int, message_id: int) -> None:
        """Handle /about command."""
        about_msg = """
 **AI –ú–∞–≥–∞** - –ì–æ–ª–æ—Å–æ–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è

**–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –±–∞–∑–µ Yandex GPT
‚Ä¢ –ì–æ–ª–æ—Å–æ–≤–æ–µ –æ–±—â–µ–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ AI —Å–µ—Ä–≤–∏—Å–∞–º–∏


**–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫:** MagistrTheOne
**–í–µ—Ä—Å–∏—è:** 2.0 (Production)

üöÄ Powered by AI & Cloud Technologies
        """
        await self.telegram_service.send_message(chat_id=chat_id, text=about_msg.strip(), reply_to_message_id=message_id)

    async def _cmd_weather(self, chat_id: int, message_id: int, cmd_parts: List[str]) -> None:
        """Handle /weather command."""
        if len(cmd_parts) < 2:
            await self.telegram_service.send_message(
                chat_id=chat_id,
                text="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /weather [–≥–æ—Ä–æ–¥]\n–ü—Ä–∏–º–µ—Ä: /weather –ú–æ—Å–∫–≤–∞",
                reply_to_message_id=message_id
            )
            return

        city = " ".join(cmd_parts[1:])
        try:
            # Ask GPT for weather information
            weather_prompt = f"–†–∞—Å—Å–∫–∞–∂–∏ –∫—Ä–∞—Ç–∫–æ –æ –ø–æ–≥–æ–¥–µ –≤ –≥–æ—Ä–æ–¥–µ {city} –Ω–∞ —Å–µ–≥–æ–¥–Ω—è. –£–∫–∞–∂–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É, –æ—Å–∞–¥–∫–∏ –∏ –æ–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ."
            response = await yandex_gpt.chat(weather_prompt)

            await self.telegram_service.send_message(
                chat_id=chat_id,
                text=f"üå§Ô∏è –ü–æ–≥–æ–¥–∞ –≤ {city}:\n\n{response}",
                reply_to_message_id=message_id
            )
        except Exception as e:
            await self.telegram_service.send_message(
                chat_id=chat_id,
                text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_to_message_id=message_id
            )

    async def _cmd_news(self, chat_id: int, message_id: int, cmd_parts: List[str]) -> None:
        """Handle /news command."""
        category = " ".join(cmd_parts[1:]) if len(cmd_parts) > 1 else "–æ–±—â–∏–µ"
        try:
            # Ask GPT for news
            news_prompt = f"–†–∞—Å—Å–∫–∞–∂–∏ 3 —Å–∞–º—ã–µ —Å–≤–µ–∂–∏–µ –∏ –≤–∞–∂–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –ë—É–¥—å –∫—Ä–∞—Ç–æ–∫."
            response = await yandex_gpt.chat(news_prompt)

            await self.telegram_service.send_message(
                chat_id=chat_id,
                text=f"üì∞ –ù–æ–≤–æ—Å—Ç–∏ ({category}):\n\n{response}",
                reply_to_message_id=message_id
            )
        except Exception as e:
            await self.telegram_service.send_message(
                chat_id=chat_id,
                text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_to_message_id=message_id
            )

    async def _cmd_translate(self, chat_id: int, message_id: int, cmd_parts: List[str]) -> None:
        """Handle /translate command."""
        if len(cmd_parts) < 3:
            await self.telegram_service.send_message(
                chat_id=chat_id,
                text="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /translate [—è–∑—ã–∫] [—Ç–µ–∫—Å—Ç]\n–ü—Ä–∏–º–µ—Ä: /translate –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –ø—Ä–∏–≤–µ—Ç –º–∏—Ä",
                reply_to_message_id=message_id
            )
            return

        target_lang = cmd_parts[1]
        text_to_translate = " ".join(cmd_parts[2:])

        try:
            # Ask GPT for translation
            translate_prompt = f"–ü–µ—Ä–µ–≤–µ–¥–∏ –Ω–∞ {target_lang}: '{text_to_translate}'"
            response = await yandex_gpt.chat(translate_prompt)

            await self.telegram_service.send_message(
                chat_id=chat_id,
                text=f"üîÑ –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ {target_lang}:\n\n{response}",
                reply_to_message_id=message_id
            )
        except Exception as e:
            await self.telegram_service.send_message(
                chat_id=chat_id,
                text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_to_message_id=message_id
            )

    async def _cmd_image(self, chat_id: int, message_id: int, cmd_parts: List[str]) -> None:
        """Handle /image command."""
        if len(cmd_parts) < 2:
            await self.telegram_service.send_message(
                chat_id=chat_id,
                text="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /image [–æ–ø–∏—Å–∞–Ω–∏–µ]\n–ü—Ä–∏–º–µ—Ä: /image –∫—Ä–∞—Å–∏–≤—ã–π –∑–∞–∫–∞—Ç –Ω–∞–¥ –≥–æ—Ä–∞–º–∏",
                reply_to_message_id=message_id
            )
            return

        description = " ".join(cmd_parts[1:])

        try:
            # Ask GPT to generate image description
            image_prompt = f"–°–æ–∑–¥–∞–π –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {description}. –ë—É–¥—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º."
            response = await yandex_gpt.chat(image_prompt)

            await self.telegram_service.send_message(
                chat_id=chat_id,
                text=f"üé® –û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:\n\n{response}\n\n‚ö†Ô∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ–∑–∂–µ!",
                reply_to_message_id=message_id
            )
        except Exception as e:
            await self.telegram_service.send_message(
                chat_id=chat_id,
                text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_to_message_id=message_id
            )

    async def _cmd_remind(self, chat_id: int, message_id: int, cmd_parts: List[str]) -> None:
        """Handle /remind command."""
        if len(cmd_parts) < 3:
            await self.telegram_service.send_message(
                chat_id=chat_id,
                text="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /remind [–≤—Ä–µ–º—è] [–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ]\n–ü—Ä–∏–º–µ—Ä: /remind —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç –ø–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ",
                reply_to_message_id=message_id
            )
            return

        time_info = cmd_parts[1]
        reminder_text = " ".join(cmd_parts[2:])

        try:
            # Simple reminder logic
            reminder_msg = f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!\n\nüìù {reminder_text}\n‚è±Ô∏è –í—Ä–µ–º—è: {time_info}"

            await self.telegram_service.send_message(
                chat_id=chat_id,
                text=reminder_msg,
                reply_to_message_id=message_id
            )
        except Exception as e:
            await self.telegram_service.send_message(
                chat_id=chat_id,
                text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_to_message_id=message_id
            )

    async def _cmd_calc(self, chat_id: int, message_id: int, cmd_parts: List[str]) -> None:
        """Handle /calc command."""
        if len(cmd_parts) < 2:
            await self.telegram_service.send_message(
                chat_id=chat_id,
                text="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /calc [–≤—ã—Ä–∞–∂–µ–Ω–∏–µ]\n–ü—Ä–∏–º–µ—Ä: /calc 2 + 2 * 3",
                reply_to_message_id=message_id
            )
            return

        expression = " ".join(cmd_parts[1:])

        try:
            # Ask GPT to calculate
            calc_prompt = f"–í—ã—á–∏—Å–ª–∏ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ: {expression}. –ü–æ–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω—ã–π —Ä–∞—Å—á–µ—Ç."
            response = await yandex_gpt.chat(calc_prompt)

            await self.telegram_service.send_message(
                chat_id=chat_id,
                text=f"üßÆ –†–µ–∑—É–ª—å—Ç–∞—Ç:\n\n{response}",
                reply_to_message_id=message_id
            )
        except Exception as e:
            await self.telegram_service.send_message(
                chat_id=chat_id,
                text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã—á–∏—Å–ª–∏—Ç—å –≤—ã—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_to_message_id=message_id
            )

    async def _cmd_poll(self, chat_id: int, message_id: int, cmd_parts: List[str]) -> None:
        """Handle /poll command."""
        if len(cmd_parts) < 4:
            await self.telegram_service.send_message(
                chat_id=chat_id,
                text="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /poll [–≤–æ–ø—Ä–æ—Å] [–≤–∞—Ä–∏–∞–Ω—Ç1] [–≤–∞—Ä–∏–∞–Ω—Ç2] [–≤–∞—Ä–∏–∞–Ω—Ç3]...\n–ü—Ä–∏–º–µ—Ä: /poll –ö–∞–∫–æ–π –≤–∞—à –ª—é–±–∏–º—ã–π —Ü–≤–µ—Ç? –ö—Ä–∞—Å–Ω—ã–π –°–∏–Ω–∏–π –ó–µ–ª–µ–Ω—ã–π",
                reply_to_message_id=message_id
            )
            return

        question = cmd_parts[1]
        options = cmd_parts[2:]

        if len(options) < 2:
            await self.telegram_service.send_message(
                chat_id=chat_id,
                text="‚ùå –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞!",
                reply_to_message_id=message_id
            )
            return

        try:
            # Generate unique poll ID
            self.telegram_service._poll_counter += 1
            poll_id = f"poll_{self.telegram_service._poll_counter}"

            # Store poll options
            self.telegram_service._active_polls[poll_id] = options

            # Create inline keyboard with poll options
            keyboard = {
                "inline_keyboard": [
                    [{"text": option, "callback_data": f"poll_{poll_id}_{i}"}] for i, option in enumerate(options)
                ]
            }

            await self.telegram_service._send_keyboard(
                chat_id=chat_id,
                text=f"üìä {question}",
                keyboard=keyboard,
                reply_to_message_id=message_id
            )
        except Exception as e:
            await self.telegram_service.send_message(
                chat_id=chat_id,
                text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_to_message_id=message_id
            )

    async def _cmd_quiz(self, chat_id: int, message_id: int, cmd_parts: List[str]) -> None:
        """Handle /quiz command."""
        try:
            # Simple quiz questions
            quiz_questions = [
                {
                    "question": "–°—Ç–æ–ª–∏—Ü–∞ –†–æ—Å—Å–∏–∏?",
                    "options": ["–ú–æ—Å–∫–≤–∞", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥"],
                    "correct": 0
                },
                {
                    "question": "–°–∫–æ–ª—å–∫–æ –ø–ª–∞–Ω–µ—Ç –≤ –°–æ–ª–Ω–µ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ?",
                    "options": ["7", "8", "9", "10"],
                    "correct": 1
                },
                {
                    "question": "–ö–∞–∫–æ–π –≥–æ–¥ —Å–µ–π—á–∞—Å?",
                    "options": ["2023", "2024", "2025", "2026"],
                    "correct": 2
                }
            ]

            import random
            quiz = random.choice(quiz_questions)

            keyboard = {
                "inline_keyboard": [
                    [{"text": option, "callback_data": f"quiz_{i}_{quiz['correct']}"}]
                    for i, option in enumerate(quiz["options"])
                ]
            }

            await self.telegram_service._send_keyboard(
                chat_id=chat_id,
                text=f"üß† –í–∏–∫—Ç–æ—Ä–∏–Ω–∞!\n\n{quiz['question']}",
                keyboard=keyboard,
                reply_to_message_id=message_id
            )
        except Exception as e:
            await self.telegram_service.send_message(
                chat_id=chat_id,
                text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_to_message_id=message_id
            )

    async def _cmd_mood(self, chat_id: int, message_id: int) -> None:
        """Handle /mood command."""
        try:
            mood_keyboard = {
                "inline_keyboard": [
                    [
                        {"text": "üòä –û—Ç–ª–∏—á–Ω–æ–µ", "callback_data": "mood_great"},
                        {"text": "üòê –ù–æ—Ä–º–∞–ª—å–Ω–æ–µ", "callback_data": "mood_normal"}
                    ],
                    [
                        {"text": "üòî –ü–ª–æ—Ö–æ–µ", "callback_data": "mood_bad"},
                        {"text": "ü§î –ó–∞–¥—É–º—á–∏–≤–æ–µ", "callback_data": "mood_thinking"}
                    ]
                ]
            }

            await self.telegram_service._send_keyboard(
                chat_id=chat_id,
                text="üé≠ –ö–∞–∫–æ–µ —É –≤–∞—Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è?",
                keyboard=mood_keyboard,
                reply_to_message_id=message_id
            )
        except Exception as e:
            await self.telegram_service.send_message(
                chat_id=chat_id,
                text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_to_message_id=message_id
            )

    async def _cmd_task(self, chat_id: int, message_id: int, cmd_parts: List[str]) -> None:
        """Handle /task command."""
        if len(cmd_parts) < 2:
            await self.telegram_service.send_message(
                chat_id=chat_id,
                text="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /task [–æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏]\n–ü—Ä–∏–º–µ—Ä: /task –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é –∫ –ø—è—Ç–Ω–∏—Ü–µ",
                reply_to_message_id=message_id
            )
            return

        try:
            from app.services.automations.task_service import task_service
            from app.api.http.app import TaskCreateRequest

            task_text = " ".join(cmd_parts[1:])
            request = TaskCreateRequest(title=task_text)

            task = await task_service.create_task(str(chat_id), request)

            response = f"‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞!\n\nüìù {task.title}"
            if task.description:
                response += f"\nüìÑ {task.description}"
            if task.due_date:
                response += f"\n‚è∞ –°—Ä–æ–∫: {task.due_date}"
            response += f"\nüéØ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {task.priority}/5"

            await self.telegram_service.send_message(
                chat_id=chat_id,
                text=response,
                reply_to_message_id=message_id
            )
        except Exception as e:
            await self.telegram_service.send_message(
                chat_id=chat_id,
                text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_to_message_id=message_id
            )

    async def _cmd_tasks(self, chat_id: int, message_id: int) -> None:
        """Handle /tasks command."""
        try:
            from app.services.automations.task_service import task_service

            tasks = await task_service.get_user_tasks(str(chat_id), limit=10)

            if not tasks:
                await self.telegram_service.send_message(
                    chat_id=chat_id,
                    text="üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –∫–æ–º–∞–Ω–¥–æ–π /task",
                    reply_to_message_id=message_id
                )
                return

            response = "üìã –í–∞—à–∏ –∑–∞–¥–∞—á–∏:\n\n"
            for i, task in enumerate(tasks[:5], 1):  # Show first 5
                status_emoji = {"pending": "‚è≥", "in_progress": "üîÑ", "completed": "‚úÖ", "cancelled": "‚ùå"}.get(task.status, "‚ùì")
                response += f"{i}. {status_emoji} {task.title}\n"
                if task.due_date:
                    response += f"   ‚è∞ {task.due_date}\n"
                response += "\n"

            if len(tasks) > 5:
                response += f"... –∏ –µ—â—ë {len(tasks) - 5} –∑–∞–¥–∞—á"

            await self.telegram_service.send_message(
                chat_id=chat_id,
                text=response,
                reply_to_message_id=message_id
            )
        except Exception as e:
            await self.telegram_service.send_message(
                chat_id=chat_id,
                text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–¥–∞—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_to_message_id=message_id
            )

    async def _cmd_expense(self, chat_id: int, message_id: int, cmd_parts: List[str]) -> None:
        """Handle /expense command."""
        if len(cmd_parts) < 4:
            await self.telegram_service.send_message(
                chat_id=chat_id,
                text="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /expense [—Å—É–º–º–∞] [–∫–∞—Ç–µ–≥–æ—Ä–∏—è] [–æ–ø–∏—Å–∞–Ω–∏–µ]\n–ü—Ä–∏–º–µ—Ä: /expense 500 –µ–¥–∞ –æ–±–µ–¥ –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ",
                reply_to_message_id=message_id
            )
            return

        try:
            from app.services.automations.finance_service import finance_service
            from app.api.http.app import ExpenseCreateRequest

            amount = float(cmd_parts[1])
            category = cmd_parts[2]
            description = " ".join(cmd_parts[3:])

            request = ExpenseCreateRequest(
                amount=amount,
                category=category,
                description=description
            )

            expense = await finance_service.add_expense(str(chat_id), request)

            response = f"‚úÖ –†–∞—Å—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω!\n\nüí∞ {expense.amount} ‚ÇΩ\nüìÇ {expense.category}\nüìù {expense.description}"

            await self.telegram_service.send_message(
                chat_id=chat_id,
                text=response,
                reply_to_message_id=message_id
            )
        except ValueError:
            await self.telegram_service.send_message(
                chat_id=chat_id,
                text="‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ.",
                reply_to_message_id=message_id
            )
        except Exception as e:
            await self.telegram_service.send_message(
                chat_id=chat_id,
                text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_to_message_id=message_id
            )

    async def _cmd_expenses(self, chat_id: int, message_id: int) -> None:
        """Handle /expenses command."""
        try:
            from app.services.automations.finance_service import finance_service

            expenses = await finance_service.get_user_expenses(str(chat_id), limit=10)

            if not expenses:
                await self.telegram_service.send_message(
                    chat_id=chat_id,
                    text="üí∞ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π –∫–æ–º–∞–Ω–¥–æ–π /expense",
                    reply_to_message_id=message_id
                )
                return

            total = sum(exp.amount for exp in expenses)
            response = f"üí∞ –í–∞—à–∏ —Ä–∞—Å—Ö–æ–¥—ã (–≤—Å–µ–≥–æ: {total:.2f} ‚ÇΩ):\n\n"

            for i, expense in enumerate(expenses[:5], 1):  # Show first 5
                response += f"{i}. {expense.amount:.2f} ‚ÇΩ - {expense.category}\n"
                response += f"   üìù {expense.description}\n"
                response += f"   üìÖ {expense.date.strftime('%d.%m.%Y')}\n\n"

            if len(expenses) > 5:
                response += f"... –∏ –µ—â—ë {len(expenses) - 5} —Ä–∞—Å—Ö–æ–¥–æ–≤"

            await self.telegram_service.send_message(
                chat_id=chat_id,
                text=response,
                reply_to_message_id=message_id
            )
        except Exception as e:
            await self.telegram_service.send_message(
                chat_id=chat_id,
                text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å—Ö–æ–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_to_message_id=message_id
            )


class TelegramService:
    """Telegram Bot API integration."""

    def __init__(self):
        self.base_url = f"https://api.telegram.org/bot{settings.tg_bot_token.get_secret_value()}"
        self.logger = get_structlog_logger(__name__)
        # Store active polls: poll_id -> list of options
        self._active_polls: Dict[str, List[str]] = {}
        self._poll_counter = 0
        # Initialize command handler
        self.command_handler = CommandHandler(self)
        # Cache user info: chat_id -> (user_info, timestamp)
        self._user_cache: Dict[int, Tuple[Dict[str, Any], float]] = {}
        self._cache_ttl = 300  # 5 minutes

    def _validate_chat_id(self, chat_id: int) -> None:
        """Validate chat_id parameter."""
        if not isinstance(chat_id, int) or chat_id <= 0:
            raise ValueError(f"Invalid chat_id: {chat_id}")

    def _validate_message_id(self, message_id: int) -> None:
        """Validate message_id parameter."""
        if not isinstance(message_id, int) or message_id <= 0:
            raise ValueError(f"Invalid message_id: {message_id}")

    def _validate_callback_data(self, callback_data: str) -> None:
        """Validate callback_data parameter."""
        if not isinstance(callback_data, str) or not callback_data.strip():
            raise ValueError(f"Invalid callback_data: {callback_data}")
        if len(callback_data) > 64:  # Telegram limit
            raise ValueError(f"Callback data too long: {len(callback_data)}")

    async def send_message(
        self,
        chat_id: int,
        text: str,
        reply_to_message_id: Optional[int] = None,
        parse_mode: Optional[str] = None
    ) -> Dict[str, Any]:
        """Send text message to Telegram chat."""
        self._validate_chat_id(chat_id)
        if not isinstance(text, str) or not text.strip():
            raise ValueError(f"Invalid text: {text}")
        if reply_to_message_id is not None:
            self._validate_message_id(reply_to_message_id)

        url = f"{self.base_url}/sendMessage"
        data = {
            "chat_id": chat_id,
            "text": text,
            "reply_to_message_id": reply_to_message_id,
        }
        if parse_mode:
            data["parse_mode"] = parse_mode

        try:
            response = await http_client.post(url, json=data)
            metrics.increment("telegram_messages_sent", type="text")
            return response
        except Exception as e:
            metrics.increment("telegram_messages_sent", type="text", status="error")
            raise IntegrationError(f"Failed to send Telegram message: {e}")

    async def send_voice(
        self,
        chat_id: int,
        voice_data: bytes,
        duration: Optional[int] = None,
        reply_to_message_id: Optional[int] = None
    ) -> Dict[str, Any]:
        """Send voice message to Telegram chat."""
        url = f"{self.base_url}/sendVoice"

        # Convert audio data to file-like object
        voice_file = io.BytesIO(voice_data)
        voice_file.name = "voice.ogg"

        # Prepare multipart form data
        data = {
            "chat_id": str(chat_id),
            "voice": voice_file,
        }
        if duration:
            data["duration"] = str(duration)
        if reply_to_message_id:
            data["reply_to_message_id"] = str(reply_to_message_id)

        headers = {"Content-Type": "multipart/form-data"}

        try:
            # Note: This is a simplified implementation
            # In production, you might want to use aiohttp directly for file uploads
            response = await http_client.post(url, data=data, headers=headers)
            metrics.increment("telegram_messages_sent", type="voice")
            return response
        except Exception as e:
            metrics.increment("telegram_messages_sent", type="voice", status="error")
            raise IntegrationError(f"Failed to send Telegram voice: {e}")

    async def download_file(self, file_id: str) -> bytes:
        """Download file from Telegram servers."""
        if not isinstance(file_id, str) or not file_id.strip():
            raise ValueError(f"Invalid file_id: {file_id}")

        # First get file info
        file_info_url = f"{self.base_url}/getFile"
        file_info = await http_client.post(file_info_url, json={"file_id": file_id})

        if not file_info.get("ok"):
            raise IntegrationError(f"Failed to get file info: {file_info}")

        file_data = file_info["result"]
        file_path = file_data["file_path"]
        file_size = file_data.get("file_size", 0)

        # Check file size limit (20MB for voice messages)
        max_file_size = 20 * 1024 * 1024  # 20MB
        if file_size > max_file_size:
            raise IntegrationError(f"File too large: {file_size} bytes (max: {max_file_size})")

        # Validate file path (should be safe)
        if not file_path or ".." in file_path or file_path.startswith("/"):
            raise IntegrationError(f"Invalid file path: {file_path}")

        download_url = f"https://api.telegram.org/file/bot{settings.tg_bot_token.get_secret_value()}/{file_path}"

        try:
            response = await http_client.get(download_url)
            if isinstance(response, bytes):
                # Double check downloaded file size
                if len(response) > max_file_size:
                    raise IntegrationError(f"Downloaded file too large: {len(response)} bytes")
                return response
            else:
                raise IntegrationError("Unexpected response type for file download")
        except Exception as e:
            raise IntegrationError(f"Failed to download file: {e}")

    async def process_text_message(self, chat_id: int, text: str, message_id: int) -> None:
        """Process text message and send response."""
        self.logger.error("DEBUG: process_text_message called", chat_id=chat_id, text=text[:100])

        self._validate_chat_id(chat_id)
        if not isinstance(text, str) or not text.strip():
            raise ValueError(f"Invalid text: {text}")
        self._validate_message_id(message_id)

        # Rate limiting - temporarily disabled for debugging
        user_id = str(chat_id)
        self.logger.error("DEBUG: Skipping rate limit check for debugging", user_id=user_id)
        # if text.startswith('/'):
        #     await check_rate_limit(user_id, CommandType.GENERATE_RESPONSE)
        # else:
        #     await check_rate_limit(user_id, CommandType.CHAT_MESSAGE)

        self.logger.error("DEBUG: Processing message without rate limit")
        try:
            # Handle commands
            if text.startswith('/'):
                await self._handle_command(chat_id, text, message_id)
                return

            # Get user info for personalization
            user_info = await self._get_user_info(chat_id)

            # Add personalization to the message
            personalized_text = await self._personalize_message(text, user_info)

            # Generate response using Yandex GPT
            response_text = await yandex_gpt.chat(
                personalized_text,
                session_id=f"telegram_{chat_id}"
            )

            # Send text response
            await self.send_message(
                chat_id=chat_id,
                text=response_text,
                reply_to_message_id=message_id
            )

            # Generate voice response
            voice_data = await tts.synthesize(
                text=response_text,
                language="ru-RU",
                format="oggopus"  # Telegram prefers OGG Opus for voice messages
            )

            # Send voice response
            await self.send_voice(
                chat_id=chat_id,
                voice_data=voice_data,
                reply_to_message_id=message_id
            )

        except Exception as e:
            self.logger.error(
                "Error processing text message",
                chat_id=chat_id,
                message_id=message_id,
                text_length=len(text) if text else 0,
                error=str(e),
                error_type=type(e).__name__
            )
            error_msg = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            try:
                await self.send_message(chat_id=chat_id, text=error_msg, reply_to_message_id=message_id)
            except Exception as send_error:
                self.logger.error(
                    "Failed to send error message to user",
                    chat_id=chat_id,
                    send_error=str(send_error)
                )
            raise

    async def _get_user_info(self, chat_id: int) -> Dict[str, Any]:
        """Get user information from Telegram."""
        # Check cache first
        current_time = time.time()
        if chat_id in self._user_cache:
            cached_info, timestamp = self._user_cache[chat_id]
            if current_time - timestamp < self._cache_ttl:
                return cached_info

        try:
            url = f"{self.base_url}/getChat"
            data = {"chat_id": chat_id}
            response = await http_client.post(url, json=data)
            chat_info = response["result"]

            # Try to get member info for groups
            if chat_info.get("type") in ["group", "supergroup"]:
                url = f"{self.base_url}/getChatMember"
                data = {"chat_id": chat_id, "user_id": chat_id}
                response = await http_client.post(url, json=data)
                member_info = response["result"]
                user_info = {
                    "name": member_info.get("user", {}).get("first_name", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"),
                    "username": member_info.get("user", {}).get("username"),
                    "is_admin": member_info.get("status") in ["administrator", "creator"]
                }
                # Cache the result
                self._user_cache[chat_id] = (user_info, current_time)
                return user_info

            # For private chats, try to get user profile
            if "first_name" in chat_info:
                user_info = {
                    "name": chat_info.get("first_name", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"),
                    "username": chat_info.get("username"),
                    "is_admin": False
                }
                # Cache the result
                self._user_cache[chat_id] = (user_info, current_time)
                return user_info

            user_info = {"name": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", "username": None, "is_admin": False}
            # Cache the result
            self._user_cache[chat_id] = (user_info, current_time)
            return user_info

        except Exception as e:
            self.logger.warning(f"Failed to get user info for chat {chat_id}: {e}")
            return {"name": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", "username": None, "is_admin": False}

    async def _handle_command(self, chat_id: int, command: str, message_id: int) -> None:
        """Handle bot commands."""
        self.logger.error("DEBUG: _handle_command called", command=command[:100])
        await self.command_handler.handle_command(chat_id, command, message_id)


    async def _send_keyboard(self, chat_id: int, text: str, keyboard: Dict, reply_to_message_id: int = None) -> None:
        """Send message with inline keyboard."""
        try:
            url = f"{self.base_url}/sendMessage"
            payload = {
                "chat_id": chat_id,
                "text": text,
                "parse_mode": "HTML",
                "reply_markup": json.dumps(keyboard)
            }
            if reply_to_message_id:
                payload["reply_to_message_id"] = reply_to_message_id

            response = await http_client.post(url, json=payload)
        except Exception as e:
            self.logger.error(f"Failed to send keyboard: {e}")
            # Fallback to regular message
            await self.send_message(chat_id=chat_id, text=text, reply_to_message_id=reply_to_message_id)

    async def _personalize_message(self, text: str, user_info: Dict[str, Any]) -> str:
        """Add personalization to the message."""
        if user_info.get("name") and user_info["name"] != "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å":
            # Add context about the user
            personalized = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_info['name']}"
            if user_info.get("username"):
                personalized += f" (@{user_info['username']})"
            personalized += f" —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç: {text}"
            return personalized
        return text

    async def _get_conversation_history(self, chat_id: int, limit: int = 5) -> str:
        """Get recent conversation history for context."""
        # Simple implementation - in production would use database
        # For now, just return empty context
        return ""

    async def _save_message_to_history(self, chat_id: int, message: str, is_user: bool = True) -> None:
        """Save message to conversation history."""
        # Simple implementation - in production would save to database
        pass

    async def process_callback_query(self, chat_id: int, callback_data: str, message_id: int) -> None:
        """Process callback query from inline buttons."""
        self._validate_chat_id(chat_id)
        self._validate_callback_data(callback_data)
        self._validate_message_id(message_id)

        # Rate limiting
        user_id = str(chat_id)
        await check_rate_limit(user_id, CommandType.CHAT_MESSAGE)

        try:
            # Parse callback data
            parts = callback_data.split('_')
            action = parts[0]

            if action == "poll":
                # Handle poll answer
                poll_id = parts[1]
                option_index = int(parts[2])
                await self._handle_poll_answer(chat_id, message_id, poll_id, option_index)
            elif action == "quiz":
                # Handle quiz answer
                user_answer = int(parts[1])
                correct_answer = int(parts[2])
                await self._handle_quiz_answer(chat_id, message_id, user_answer, correct_answer)
            elif action == "mood":
                # Handle mood response
                mood_type = "_".join(parts[1:])
                await self._handle_mood_response(chat_id, message_id, mood_type)
            else:
                await self.send_message(
                    chat_id=chat_id,
                    text="‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ",
                    reply_to_message_id=message_id
                )
        except Exception as e:
            self.logger.error(
                "Error processing callback query",
                chat_id=chat_id,
                message_id=message_id,
                callback_data=callback_data,
                error=str(e),
                error_type=type(e).__name__
            )
            error_msg = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–µ–π—Å—Ç–≤–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            try:
                await self.send_message(
                    chat_id=chat_id,
                    text=error_msg,
                    reply_to_message_id=message_id
                )
            except Exception as send_error:
                self.logger.error(
                    "Failed to send callback error message to user",
                    chat_id=chat_id,
                    send_error=str(send_error)
                )

    async def _handle_poll_answer(self, chat_id: int, message_id: int, poll_id: str, option_index: int) -> None:
        """Handle poll answer."""
        options = self._active_polls.get(poll_id)
        if not options:
            await self.send_message(
                chat_id=chat_id,
                text="‚ùå –û–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª",
                reply_to_message_id=message_id
            )
            return

        if 0 <= option_index < len(options):
            selected_option = options[option_index]
            await self.send_message(
                chat_id=chat_id,
                text=f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏: {selected_option}",
                reply_to_message_id=message_id
            )
        else:
            await self.send_message(
                chat_id=chat_id,
                text="‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞",
                reply_to_message_id=message_id
            )

    async def _handle_quiz_answer(self, chat_id: int, message_id: int, user_answer: int, correct_answer: int) -> None:
        """Handle quiz answer."""
        if user_answer == correct_answer:
            await self.send_message(
                chat_id=chat_id,
                text="üéâ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –í—ã –º–æ–ª–æ–¥–µ—Ü! üèÜ",
                reply_to_message_id=message_id
            )
        else:
            await self.send_message(
                chat_id=chat_id,
                text=f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑! üí™\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /quiz —Å–Ω–æ–≤–∞!",
                reply_to_message_id=message_id
            )

    async def _handle_mood_response(self, chat_id: int, message_id: int, mood_type: str) -> None:
        """Handle mood response."""
        mood_responses = {
            "great": "üòä –û—Ç–ª–∏—á–Ω–æ! –†–∞–¥ —Å–ª—ã—à–∞—Ç—å, —á—Ç–æ —É –≤–∞—Å —Ö–æ—Ä–æ—à–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ!",
            "normal": "üòê –ù–æ—Ä–º–∞–ª—å–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ - —ç—Ç–æ —É–∂–µ —Ö–æ—Ä–æ—à–æ! –ì–ª–∞–≤–Ω–æ–µ –ø–æ–∑–∏—Ç–∏–≤! üëç",
            "bad": "üòî –ü–æ–Ω–∏–º–∞—é, –∏–Ω–æ–≥–¥–∞ –±—ã–≤–∞–µ—Ç —Ç—Ä—É–¥–Ω–æ. –•–æ—Ç–∏—Ç–µ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å –æ–± —ç—Ç–æ–º?",
            "thinking": "ü§î –ó–∞–¥—É–º—á–∏–≤–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ... –ú–æ–∂–µ—Ç –±—ã—Ç—å, —Å—Ç–æ–∏—Ç –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ?"
        }

        response = mood_responses.get(mood_type, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ")
        await self.send_message(
            chat_id=chat_id,
            text=response,
            reply_to_message_id=message_id
        )

    async def process_voice_message(self, chat_id: int, voice_file_id: str, message_id: int) -> None:
        """Process voice message and send response."""
        self._validate_chat_id(chat_id)
        if not isinstance(voice_file_id, str) or not voice_file_id.strip():
            raise ValueError(f"Invalid voice_file_id: {voice_file_id}")
        self._validate_message_id(message_id)

        # Rate limiting
        user_id = str(chat_id)
        await check_rate_limit(user_id, CommandType.READ_TEXT)

        try:
            # Download voice file
            voice_data = await self.download_file(voice_file_id)

            # Transcribe speech to text
            transcription_result = await stt.transcribe(voice_data)

            if not transcription_result.get("text"):
                await self.send_message(
                    chat_id=chat_id,
                    text="–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                    reply_to_message_id=message_id
                )
                return

            user_text = transcription_result["text"]

            # Confirm transcription
            await self.send_message(
                chat_id=chat_id,
                text=f"üé§ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {user_text}",
                reply_to_message_id=message_id
            )

            # Generate response using Yandex GPT
            response_text = await yandex_gpt.chat(
                user_text,
                session_id=f"telegram_{chat_id}"
            )

            # Send text response
            await self.send_message(
                chat_id=chat_id,
                text=f"üí¨ {response_text}",
                reply_to_message_id=message_id
            )

            # Generate voice response
            voice_data = await tts.synthesize(
                text=response_text,
                language="ru-RU",
                format="oggopus"
            )

            # Send voice response
            await self.send_voice(
                chat_id=chat_id,
                voice_data=voice_data,
                reply_to_message_id=message_id
            )

        except Exception as e:
            self.logger.error(
                "Error processing voice message",
                chat_id=chat_id,
                message_id=message_id,
                voice_file_id=voice_file_id,
                error=str(e),
                error_type=type(e).__name__
            )
            error_msg = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            try:
                await self.send_message(chat_id=chat_id, text=error_msg, reply_to_message_id=message_id)
            except Exception as send_error:
                self.logger.error(
                    "Failed to send error message to user",
                    chat_id=chat_id,
                    send_error=str(send_error)
                )
            raise


# Global Telegram service instance
telegram_service = TelegramService()
